{
	"Now": {
		"prefix": "now",
		"description": "Now",
		"scope": "",
		"body": [
			"${CURRENT_YEAR}-$CURRENT_MONTH-${CURRENT_DATE}T${CURRENT_HOUR}:${CURRENT_MINUTE}${CURRENT_TIMEZONE_OFFSET}"
		]
	},
	"Import From Default": {
		"prefix": "im-default",
		"description": "Import a module",
		"scope": "javascript,typescript",
		"body": [
			"import $1 from '$2'"
		]
	},
	"Import From": {
		"prefix": "im",
		"description": "Import members from a module",
		"scope": "javascript,typescript",
		"body": [
			"import { $1 } from '$2'"
		]
	},
	"Export Default": {
		"prefix": "ex-default",
		"description": "Export this module",
		"scope": "javascript,typescript",
		"body": [
			"export default $1"
		]
	},
	"Export": {
		"prefix": "ex",
		"description": "Export a member of this module",
		"scope": "javascript,typescript",
		"body": [
			"export $1"
		]
	},
	"Export Another": {
		"prefix": "ex-another",
		"description": "Export members of another module in this module",
		"scope": "javascript,typescript",
		"body": [
			"export * from '$1'"
		]
	},
	"Const": {
		"prefix": "cst",
		"description": "Const",
		"scope": "javascript,typescript",
		"body": [
			"const $1"
		]
	},
	"Let": {
		"prefix": "let",
		"description": "Let",
		"scope": "javascript,typescript",
		"body": [
			"let $1"
		]
	},
	"For In": {
		"prefix": "fin",
		"description": "For in",
		"scope": "javascript,typescript",
		"body": [
			"for (const ${1:item} in {2:object}) {",
			"  $0",
			"}"
		]
	},
	"For Of": {
		"prefix": "fof",
		"description": "For of",
		"scope": "javascript,typescript",
		"body": [
			"for (const ${1:item} of {2:object}) {",
			"  $0",
			"}"
		]
	},
	"Destructure Object": {
		"prefix": "deo",
		"description": "Destructure object",
		"scope": "javascript,typescript",
		"body": [
			"const { ${1:property} } = ${2:object}"
		]
	},
	"Console Log": {
		"prefix": "cl",
		"description": "Console log",
		"scope": "javascript,typescript",
		"body": [
			"console.log($1)"
		]
	},
	"Console Info": {
		"prefix": "ci",
		"description": "Console info",
		"scope": "javascript,typescript",
		"body": [
			"console.info($1)"
		]
	},
	"Console Warn": {
		"prefix": "cw",
		"description": "Console warn",
		"scope": "javascript,typescript",
		"body": [
			"console.warn($1)"
		]
	},
	"Console Error": {
		"prefix": "ce",
		"description": "Console error",
		"scope": "javascript,typescript",
		"body": [
			"console.error($1)"
		]
	},
	"Markdown Table": {
		"prefix": "mkd-table",
		"description": "Markdown table",
		"scope": "markdown",
		"body": [
			"<table><tr><td width=\"500px\" valign=\"top\">",
			"",
			"### $1",
			"",
			"</td><td width=\"500px\" valign=\"top\">",
			"",
			"### $2",
			"",
			"</td></tr></table>",
			""
		]
	},
	"Vue Script Options": {
		"prefix": "v-script-options",
		"description": "Vue SFC script options",
		"scope": "vue",
		"body": [
			"<script>",
			"export default {",
			"  $0",
			"}",
			"</script>"
		]
	},
	"Vue Script Setup": {
		"prefix": [
			"v-script",
			"v-script-setup"
		],
		"description": "Vue SFC script setup",
		"scope": "vue",
		"body": [
			"<script lang=\"ts\" setup>",
			"$0",
			"</script>"
		]
	},
	"Vue Style Global": {
		"prefix": "v-style-global",
		"description": "Vue SFC style global",
		"scope": "vue",
		"body": [
			"<style>",
			"$0",
			"</style>"
		]
	},
	"Vue Style Scoped": {
		"prefix": [
			"v-style",
			"v-style-scoped"
		],
		"description": "Vue SFC style scoped",
		"scope": "vue",
		"body": [
			"<style scoped>",
			"$0",
			"</style>"
		]
	},
	"Vue I18n Block Local": {
		"prefix": [
			"v-i18n",
			"v-i18n-local"
		],
		"description": "Vue SFC i18n block local",
		"scope": "vue",
		"body": [
			"<i18n lang=\"yaml\">",
			"$0",
			"</i18n>"
		]
	},
	"Vue I18n Block Global": {
		"prefix": "v-i18n-global",
		"description": "Vue SFC i18n block global",
		"scope": "vue",
		"body": [
			"<i18n lang=\"yaml\" global>",
			"$0",
			"</i18n>"
		]
	},
  "Pinia Options Store Boilerplate": {
    "scope": "javascript,typescript",
    "prefix": "pinia-options",
    "body": [
		"import { acceptHMRUpdate, defineStore } from 'pinia'",
		"",
		"export const use${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}Store = defineStore('$TM_FILENAME_BASE', {",
		" state: () => ({",
		"   $0",
		" }),",
		" getters: {},",
		" actions: {},",
		"})",
		"",
		"if (import.meta.hot) {",
		" import.meta.hot.accept(acceptHMRUpdate(use${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}Store, import.meta.hot))",
		"}",
		""
	],
    "description": "Bootstrap the code needed for a Vue.js Pinia Options Store file"
  },
  "Pinia Setup Store Boilerplate": {
    "scope": "javascript,typescript",
    "prefix": [
		"pinia",
		"pinia-setup"
	],
    "body": [
		"import { acceptHMRUpdate, defineStore } from 'pinia'",
		"",
		"export const use${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}Store = defineStore('$TM_FILENAME_BASE', () => {",
		" $0",
		" return {}",
		"})",
		"",
		"if (import.meta.hot) {",
		" import.meta.hot.accept(acceptHMRUpdate(use${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}Store, import.meta.hot))",
		"}",
		""
	],
    "description": "Bootstrap the code needed for a Vue.js Pinia Setup Store file"
  }
}
