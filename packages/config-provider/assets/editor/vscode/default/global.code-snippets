{
	"Now": {
		"prefix": "now",
		"description": "Now",
		"scope": "",
		"body": [
			"${CURRENT_YEAR}-$CURRENT_MONTH-${CURRENT_DATE}T${CURRENT_HOUR}:${CURRENT_MINUTE}${CURRENT_TIMEZONE_OFFSET}"
		]
	},
	"Import Sideeffect": {
		"prefix": [
			"imp-sideeffect",
			"ise"
		],
		"description": "Import sideeffect",
		"scope": "javascript,typescript",
		"body": [
			"import '${1:module}'"
		]
	},
	"Import Default From": {
		"prefix": [
			"imp-default",
			"idf"
		],
		"description": "Import default from a module",
		"scope": "javascript,typescript",
		"body": [
			"import ${1:module} from '${1:module}'"
		]
	},
	"Import As": {
		"prefix": [
			"imp-as",
			"ias"
		],
		"description": "Import as from a module",
		"scope": "javascript,typescript",
		"body": [
			"import * as ${1:module} from '${1:module}'"
		]
	},
	"Import Destruct From": {
		"prefix": [
			"imp-destruct",
			"ids"
		],
		"description": "Import destruct from a module",
		"scope": "javascript,typescript",
		"body": [
			"import { $2 } from '${1:module}'"
		]
	},
	"Export Default": {
		"prefix": [
			"exp-default",
			"edf"
		],
		"description": "Export default",
		"scope": "javascript,typescript",
		"body": [
			"export default $1"
		]
	},
	"Export Const": {
		"prefix": [
			"exp-const",
			"ecs"
		],
		"description": "Export const",
		"scope": "javascript,typescript",
		"body": [
			"export const ${1:name}"
		]
	},
	"Export Function": {
		"prefix": [
			"exp-function",
			"efn"
		],
		"description": "Export function",
		"scope": "javascript,typescript",
		"body": [
			"export function ${1:name}"
		]
	},
	"Export From": {
		"prefix": [
			"exp-from",
			"efr"
		],
		"description": "Export from another module",
		"scope": "javascript,typescript",
		"body": [
			"export * from '${1:module}'"
		]
	},
	"Const": {
		"prefix": "cs",
		"description": "Const",
		"scope": "javascript,typescript",
		"body": [
			"const $1"
		]
	},
	"Let": {
		"prefix": "lt",
		"description": "Let",
		"scope": "javascript,typescript",
		"body": [
			"let $1"
		]
	},
	"Function": {
		"prefix": "fn",
		"description": "Function",
		"scope": "javascript,typescript",
		"body": [
			"function ${1:name} (${2:params}) {",
			"  $0",
			"}"
		]
	},
	"Arrow Function": {
		"prefix": "afn",
		"description": "Arrow function",
		"scope": "javascript,typescript",
		"body": [
			"(${1:params}) => {",
			"  $0",
			"}"
		]
	},
	"For In": {
		"prefix": "fin",
		"description": "For in",
		"scope": "javascript,typescript",
		"body": [
			"for (const ${1:key} in {2:object}) {",
			"  $0",
			"}"
		]
	},
	"For Of": {
		"prefix": "fof",
		"description": "For of",
		"scope": "javascript,typescript",
		"body": [
			"for (const ${1:item} of {2:array}) {",
			"  $0",
			"}"
		]
	},
	"Destructe Object": {
		"prefix": "dso",
		"description": "Destructe object",
		"scope": "javascript,typescript",
		"body": [
			"const { ${1:property} } = ${2:object}"
		]
	},
	"Console Log": {
		"prefix": "cl",
		"description": "Console log",
		"scope": "javascript,typescript",
		"body": [
			"console.log($1)"
		]
	},
	"Console Info": {
		"prefix": "ci",
		"description": "Console info",
		"scope": "javascript,typescript",
		"body": [
			"console.info($1)"
		]
	},
	"Console Warn": {
		"prefix": "cw",
		"description": "Console warn",
		"scope": "javascript,typescript",
		"body": [
			"console.warn($1)"
		]
	},
	"Console Error": {
		"prefix": "ce",
		"description": "Console error",
		"scope": "javascript,typescript",
		"body": [
			"console.error($1)"
		]
	},
	"Markdown Table": {
		"prefix": [
			"mkd-table",
			"mtable"
		],
		"description": "Markdown table",
		"scope": "markdown",
		"body": [
			"<table><tr><td width=\"500px\" valign=\"top\">",
			"",
			"### $1",
			"",
			"</td><td width=\"500px\" valign=\"top\">",
			"",
			"### $2",
			"",
			"</td></tr></table>",
			""
		]
	},
	"Vue Script Setup (TS)": {
		"prefix": [
			"vue-script-setup",
			"vsc"
		],
		"description": "Vue SFC script setup (TS)",
		"scope": "vue",
		"body": [
			"<script lang=\"ts\" setup>",
			"$0",
			"</script>"
		]
	},
  "Vue Style Scoped": {
		"prefix": [
			"vue-style-scoped",
			"vst"
		],
		"description": "Vue SFC style scoped",
		"scope": "vue",
		"body": [
			"<style scoped>",
			"$0",
			"</style>"
		]
	},
	"Vue I18n Block Local": {
		"prefix": [
			"vue-i18n-local",
			"i18"
		],
		"description": "Vue SFC i18n block local",
		"scope": "vue",
		"body": [
			"<i18n lang=\"yaml\">",
			"$0",
			"</i18n>"
		]
	},
  "Pinia Setup Store Boilerplate": {
    "scope": "javascript,typescript",
    "prefix": [
		"pinia-setup",
		"pinia"
	],
    "body": [
		"import { acceptHMRUpdate, defineStore } from 'pinia'",
		"",
		"export const use${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}Store = defineStore('$TM_FILENAME_BASE', () => {",
		" $0",
		" return {}",
		"})",
		"",
		"if (import.meta.hot) {",
		" import.meta.hot.accept(acceptHMRUpdate(use${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}Store, import.meta.hot))",
		"}",
		""
	],
    "description": "Bootstrap the code needed for a Vue.js Pinia Setup Store file"
  },
  "Pinia Options Store Boilerplate": {
    "scope": "javascript,typescript",
    "prefix": "pinia-options",
    "body": [
		"import { acceptHMRUpdate, defineStore } from 'pinia'",
		"",
		"export const use${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}Store = defineStore('$TM_FILENAME_BASE', {",
		" state: () => ({",
		"   $0",
		" }),",
		" getters: {},",
		" actions: {},",
		"})",
		"",
		"if (import.meta.hot) {",
		" import.meta.hot.accept(acceptHMRUpdate(use${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}Store, import.meta.hot))",
		"}",
		""
	],
    "description": "Bootstrap the code needed for a Vue.js Pinia Options Store file"
  },
}
