////
/// The module for operating selector (BEM style & state check)
///
/// @access public
/// @author Lumirelle
////

@use "sass:meta";
@use "sass:string";

/// Separator
$separator: "-";

/// Element separator
$element-separator: "__";

/// Modifier separator
$modifier-separator: "--";

/// State prefix
$state-prefix: "is-";

/// Block name
///
/// @access private
$block: null;

/// Element name
///
/// @access private
$element: null;

/// @access private
@function has-special-nesting-rule($selector) {
  @return has-modifier($selector) or has-state-flag($selector) or has-pseudo-class($selector);
}

/// @access private
@function has-modifier($selector) {
  $selector: selector-to-string($selector);

  @if string.index($selector, $modifier-separator) {
    @return true;
  }
  @else {
    @return false;
  }
}

/// @access private
@function has-state-flag($selector) {
  $selector: selector-to-string($selector);

  @if string.index($selector, "." + $state-prefix) {
    @return true;
  }
  @else {
    @return false;
  }
}

/// @access private
@function has-pseudo-class($selector) {
  $selector: selector-to-string($selector);

  @if string.index($selector, ":") {
    @return true;
  }
  @else {
    @return false;
  }
}

/// @access private
@function selector-to-string($selector) {
  $selector: meta.inspect($selector);
  $selector: string.slice($selector, 2, -2);

  @return $selector;
}

/// Generate a BEM selector, commonly used in the case of setting the same style to multiple selectors
///
/// @param {String} $block - Block name
/// @param {String} $element - Element name
/// @param {String} $modifier - Modifier name
/// @content BEM selector content
/// @output BEM selector definition
/// @example
///   // SCSS
///   @function bem('color-picker') {
///     width: 100%;
///   }
///
///   @function bem('color-picker', 'panel') {
///     width: 100%;
///   }
///
///   @function bem('color-picker', 'panel', 'large') {
///     width: 100%;
///   }
///
///   // CSS Output
///   .color-picker {
///     width: 100%;
///   }
///
///   .color-picker__panel {
///     width: 100%;
///   }
///
///   .color-picker__panel--large {
///     width: 100%;
///   }
@function bem($block, $element: "", $modifier: "") {
  $name: $separator + $block;

  @if $element != "" {
    $name: $name + $element-separator + $element;
  }

  @if $modifier != "" {
    $name: $name + $modifier-separator + $modifier;
  }

  @return $name;
}

/// Generate BEM selector for block.
///
/// @param {String} $block - Block name
/// @content BEM selector content
/// @output BEM selector definition
/// @example
///   // SCSS
///   @include b('button') {
///     border: 1px solid #000;
///   }
///
///   // CSS Output
///   .button {
///     border: 1px solid #000;
///   }
@mixin b($block) {
  $block: $block !global;

  .#{$block} {
    @content;
  }
}

/// Generate BEM selector for element. Should be used within the block mixin.
///
/// @param {String} $element - Element name
/// @requires $block
/// @content BEM selector content
/// @output BEM selector definition
/// @example
///   // SCSS
///   @include b('button') {
///     @include e('icon') {
///       width: 16px;
///     }
///   }
///
///   // CSS Output
///   .button__icon {
///     width: 16px;
///   }
@mixin e($element) {
  $element: $element !global;
  $selector: &;
  $current-selector: "";

  @each $unit in $element {
    $current-selector: #{$current-selector + "." + $block + $element-separator + $unit + ","};
  }

  @if has-special-nesting-rule($selector) {
    @at-root {
      #{$selector} {
        #{$current-selector} {
          @content;
        }
      }
    }
  }
  @else {
    @at-root {
      #{$current-selector} {
        @content;
      }
    }
  }
}

/// Generate BEM selector for modifier. Should be used within the block or element mixin.
///
/// @param {String} $modifier - Modifier name
/// @requires $block
/// @requires $element
/// @content BEM selector content
/// @output BEM selector definition
/// @example
///   // SCSS
///   @include m('large', 'small) {
///     width: 100%;
///   }
///
///   // CSS Output
///   .button__icon--large,
///   .button__icon--small {
///     width: 100%;
///   }
@mixin m($modifier) {
  $selector: &;
  $current-selector: "";

  @each $unit in $modifier {
    $current-selector: #{$current-selector + $selector + $modifier-separator + $unit + ","};
  }

  @at-root {
    #{$current-selector} {
      @content;
    }
  }
}

/// Generate BEM selector for state, should be used within the block or element mixin.
///
/// @param {String} $state - State name
/// @requires $block
/// @requires $element
/// @content BEM selector content
/// @output BEM selector definition
/// @example
///   // SCSS
///   @include when('active') {
///     width: 100%;
///   }
///
///   // CSS Output
///   .button.is-active {
///     width: 100%;
///   }
@mixin when($state) {
  @at-root {
    &.#{$state-prefix + $state} {
      @content;
    }
  }
}

/// Generate BEM selector for state not. Should be used within the block or element mixin.
///
/// @param {String} $state - State name
/// @requires $block
/// @requires $element
/// @content BEM selector content
/// @output BEM selector definition
/// @example
///   // SCSS
///   @include when-not('active') {
///     width: 100%;
///   }
///
///   // CSS Output
///   .button:not(.is-active) {
///     width: 100%;
///   }
@mixin when-not($state) {
  @at-root {
    &.#{':not(' + $state-prefix + $state + ')'} {
      @content;
    }
  }
}
